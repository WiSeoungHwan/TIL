# NAVER Tech Concert_iOS
* 7월 12일

## 네이버 지도 밑그림을 그리는 SDK 개발자가 하는일 
* 손원용님 
### 네이버지도 5
	* 네이버SDK -> 네이버 지도 순으로 개발
	* 벡터맵 엔진 도입 
	* Objective-C -> Swift 
	* 실시간 업데이트 지원
	* 앱플로우 개선
	
#### 문제점 
* UI 격변 
* 새로운 엔진의 퀄리티 문제 

### SDK 업데이트
* OpenGL ES 사용 모바일 풀 벡터 지도 렌더링 엔진 
* 네이버 클라우드 플랫폼을 통해 공개 

### 오픈소스 활용 전략 
* 포크 & 재개발

### 성능 

* OverlayManager?

### 마무리 
* 앱 안 만들어도 모바일 개발자 가능
* 자신만의 SDK 를 만들어 보자 

## 들숨에 협업 날숨에 클린코드
* 박보영님 

### 마춤뻡봇에서 SwiftLint 까지
* 처음 회사에 들어왔을때 코드를 이해하기 힘들어 맞춤법부터 고쳤다.

### 코드스타일 알아보기 
* Sli.do 
* 가드문 어떻게 쓰는지 선호조사
* 가드문을 가지고 코드 convention을 맞춰보자 
* Init 스타일 
	* 인자마다 줄 넘기기
	* 코드리뷰 스플릿 방식으로 볼때 가동성 좋음 
* 읽기 좋은 코드로 생산성을 극대화 하자.

### SwiftLint
* 코드 컨벤션을 자동으로 잡아주는 도구

### MVC 탈출기

* MVC의 현실 
	* 컨트롤러와 뷰가 너무 의존성이 높아짐 
	* 컨트롤러가 비대해짐
	
* MVVM 
	* 의존도를 최대한 줄이고 비지니스 로직을 보존 
	

* ViewController
	* dind()
	* Layout()
* ViewBindable
	* 뷰에서 발생할 수있는 모든 이벤트 액션 전달 
	
* ViewModel
	* 뷰의 분신 
	* 뷰 바인더블의 구현체 
	* 뷰의 엑션과 이벤트를 모두 정의하는 곳 
	
* Model
	* Network를 통한 연결 통로
	* 비지니스 로직만 을 전담 
	
* 각자가 해야할 일을 각자가 하게 하기 
* RxSwift 적용 

### TDD 도전

* Test Code 를 짜고 싶다.

* 시작은 func 단위로 테스트해보자 
	* 모델을 단위로 테스트를 해보자 
	* 네트워크 테스트를 위해 더미데이터 작성 
	* 데이터 디코딩
	* 모델에 테스트 
	

### Swift 버전업

* 3.0 가드문 추가
* 4.0 코더블 추가
* 5.0 리절트 추가
	* 유연성이 부족한 기존의 에러 핸들링 방식을 개선 
	* 타 언어에러 핸들링 방식 
	* 결과에 대한 조건이 보다 명시적 
	

### 마무리 

* 클린코드에 대한 정의는 이미 있다.
* 클린코드의 궁극적인 목표는 협업 


@ 클린코드로 짜보자 


## 쉽고 재미있는 iOS 디버깅 - LLDB Command
* 안정민(민소네)

### LLDB 소개
* LLVM에서 지원하는 디버거 


### LLDB 명령어

* 쓰레드1 
	* frame을 뜻함 
	* thread list
	* thread select
	* thread backtrace -c , -s  프레임 숫자 
	* Frame select 프레임 숫자 
	* Frame info  프레임의 정보
	* Fr s 프렝임 숫자 
	* Up,  down 
	* Frame variable count 해당프레임의 변수 
	* Target viariable global
	* Thread step-over , next : 다음으로 넘어가기 
	* Thread step-in  : 함수 들어가기 
	* 특정 줄 /주소 전까지 실행  thread until 23 
	* Thread unitl —frame 2 10 
	* 특정 라인/코드로 이동 
		* Thread until 21 
		* Thread jump —line 19 
		* Thread jump — by -2 
		

* Evaluating Expression
	* LLDB의 기본적인 언어 설정은 없음. 
	* 어디에서 멈춰있는지 따라 사용할 수있는 언억 변경 
	*
* Expression 
	* Settinf set target.language swift 
	* Po expression -Object-description — 
	* V frame variabel  코드를 실행 하지 않으으며 
	* Po 대신 v 쓰는 게 좋음 
	

* LLDB 로 메모리 주소를 알아와 라이브 코딩 가능 

* LLDB 에서 script를 붙이면 파이썬 사용 가능 

### Chisel 
* 페이스북에서 만듬 
* 파이썬으로 작성되어 있다. 
* iOS 디버깅을 위한 LLDB 명령어 모음 


## 네이버 엔지니어링 컬처 
* 주로 물어보는 것들 
	* 네이버 앱만 하고있지 않다. 
	* 네이버 랩스 하고 있음 
	* 스노우 , 제페토 ,라인 워크, 클로바
	* 네이버 채용 홍보 


## ARKit, CoreML, Turi Create 삼형제 
* 네이버 웹툰 노수진 
* 클로버 김희재 
### 사이드 프로젝트
* ARkit
* Avfoundation
* MLKit
* CoreML
* SceneKit

### Image Tracking
* AVMetadataFaceObject 
* Face Detection
* MLKit 구글 더좋음 
* Vision Framework 애플 속도는 빠름 
* Convert Coordinate 
* ARKit : 발열문제가 있음 
	* 캡처 디바이스에 옵저버를 달고 온도가 올라가면 프레임 낮춤 
	
* Memory Budget 
	* ML Model 를 사용해 메모리 사용량 해결 
	
* Anchoring with Scenekit
* ARAnchor 
	* transform 얻을 수 있음
	
* SceneKit 
	* SCNode

### 성장 

* 개인 앱 출시 해보기 


## Turi Create 으로 Style Transfer 모델 트레이닝 하기 
* TurtleTalk 
* Artistic Stryle Transfer 
	* 두개의 그림을 합치기 
	
* 유명 라이브러리 
	* 텐서플로우 
	* 파이토치 
* CreateML ,Turi Create
	* 어떤 과제를 해결할 것인지 
	* 데이터만 준비하면 미리 준비된 테스크에 훈련시킬수 있도록 만들어 놓음 

* CreateML
	* Swift 

* TuriCreate
	* Pythton
	* Syle transfar model 제공 


* 모델 학습 
	* 데이터 준비 
		* 입력데잍터와 정답데이터를 준비 
		
	* 모델 훈련
		* 지피유 가속 
		
	* 모델 평가 

* 스타일 트렌스퍼 모델의 학습 
	* 모델잉 학습해야하는 스타일 이미지와 콘텐트 이미지 세트 준비 
	* 결과가 일치하는지는 눈으로 확인 하는 수 밖에 없음 

* 디폴트 세팅으로 훈련하면 만족할만한 결과를 얻기 힘들다 
* 하이퍼 파라미터?
	* 학습이 시작되기전에 설정하는 값
	* 학습결과에 영향을 미칠 수 있는 값

* NSML,AutoML? 

* 이슈 해결 
	* 지페를 얼굴 중심으로 크롭 
	* 얼굴 텍스쳐로 전체 이미지 채우기 
	* 256에서 512로 변환 
	

* CreaetML 가장 쉬움 
* 실험을 병렬로 수행하면 쌩산성이 100배 이상 차이 날 수 있음 


## 사용자 경험을 높이는 애니메이션 만들기 
* 김기범 

### iOS 애닌메이션 

* 왜 애니메이션이 필요한지
	* 형태는 기능을 따른다.
	* Human Interface Guidelines
		* iOS Design Themes
			* 컨텐츠 중심의 디자인 
			* 애니메이션은 컨텐츠를 이해하기 쉽게 만들기 위한 도구 
		
		* 애니메이션의 기능 
			* 중요한 컨텐츠 강조 
				* 푸시 알림 애니메이션 등등 
				* 한번 재생되면 멈추지않고 재생 
			
			* 컨텐츠의 맥락 유지 
				* Transition 에니메이션 등등 
				* 앱스토어 스토리 , 달력 등등 
				* UIView.Transition()?
				* UIViewcontrollerAnimatedTransitioning
				* UIViewControllerTransitioningDelegate
				* Fire-and-forget 
			* 유저 입역에 대한 컨텐츠의 반응
				* 제어센터 애니메이션 등등 
				* 사용자의 제스처에 따라 점진적으로 재생됨 
				* 제스터의 시작 변화 종료에 대한 처리를 해ㅐ줘야함 
				* ToucchesMoved?
				* 제스처를 달아서 활용을 많이 함 
				
 
		
	 
* 어떤 애니메이션을 만들지
	* 애니매이션 구현이 어렵다
		* 시간요소가 들어가서 복잡함 
		* 디버깅의 어려움 
		* APIㅇ의 어려움과 생소한 개념 
		* 스펙 분석의 어려움 
	* 애니메이션 기초이론 
		* 이벤트가 발생했을때
			* 트리거 
				* 무엇에 의해서 시작하는지
				* 단발성
					* 처음부터 끝까지 쭉 재생되는 에니메이션 
					* 사전에 애니메이션 값을 잘 사용해야함 
					* UIView.animate 
				* 연속성  
					* 사용자의 제슽처나 데이터의 변화에 의해 애니메이션이 점차적으로 실행됨 
					* UIGestureRecognizer 와 연관이 깊다. 
					* 데이터가 연속적으로 들어오는 제스처를 사용하게됨 
					* RxSwift와 잘 맞는다 .
					* UIViewPropertyAnimator
					* Fractioncomplete 애님메이션의 진행ㄹ률을 사용할 수있음 
				
		* UI요소를 
			* 타겟
				* UIView
					* 기본적으로 제공해주는 애니메이션들이 많음 
					* Transition: 뷰의 전환 
				* CALayer
					* 조금더 커스텀하게 설정하고 싶을때
					* CABasicAnimation 을 사용하여 구현 
					* GPU를ㄹ 사용함
				* NSLayoutContstrant
					* AutoLayout 관련된 애니메이션 
				* UIBazierPath
			
		* 시간에 따라 변화 시킨다. 
			* 타임 
				* Duration
					* 간단한 애니메이션은 0.3~0.5 가 적당 
				* Curve(Timing Function)
					* 커브값은 가능한 실제 세계의 움직임과 비슷하게 
					* Cubic-bezier 커스텀 커브값 사이트 
					* CAMediaTiming~ 
					

* 실습 
	* 드리블 이라는 사이트 에서 카피해보기 
	* 가능한 기본 API를 활용해서 구현해보기 
	* 좋은 애니메이션을 발견 하면 트리거 타겟 타임 분석해보기 


## 개발자 페널톡 

### 진로 고민 

* 개인개발 
	* 최완복
		* 대학교 3학년에 개발 시작 
		* 열악한 환경이었지만 절박함 
		* 외부요인으로 스스로를 압박해서 빠른 성장 
		
* 어떤 회사에 취업하는 것이 개발자 커리어 관리 측면에서 좋을까요 ? 
	* 경문 
		* 대학 졸업후 이력서 넣고 비교적 평범하게 취업 
		* 중소기업에서 폭넓은 일을 담당
		* SI업체에서도 많은 일을 배울 수있다. 
		* 내 역량을 펼칠수 있는 회사를 고르는게 좋음 
	* 어슬렁
		* 면접자리는 나도 회사를 평가해야함 

* 어떻게 원하는 회사를 갈 수 있을까 
	* 개인이 준비가 되어야한다. 
	* 공부 열심히하기 
	* 네이버 헼데이 
		* 네이버 헼데이 입사 
			* 네이버 개발자와 일반 지원자가 하나의 팀이 되서 하나의 앱을 만드는 프로그램 
			* 주어진 주제를 미리 준비해서 감 
		
	* 네이버 부스트캠프 
		* 완복 
			* 부스트캠프 튜터 2기3기 활동 
			* 실무에서 중요시 여기는 것들 위주로 가르침 
		* 학점인정 인턴제 
	
* 스타트업 이력서 넣을때 
	* 피드백요구함 
	* 메일으로 피드백 요구후 피드백이 오면 반영을 하려고 노력
	* 피드백: 다른 분들에 비해서 독특한게 없음 
 	* 돋보이는 이력서를 준비하는게 중요 
 	

* 이력서 포맷을 여러가지 내보면서 많이 붙는 것 위주로 업데이트 
* 면접 많이 보기
	* 면접 플로우 파악하기 
* 자신이 한 흔적들을 많이 남기기 


### 공부를 하는 방법
* 공부를 하는 방법을 공부하기 
	* 내가 공부하는 스킬을 다듬으면 나중에 새로운 기술이 나왔을때 적응할 수있다. 
	
* 공부하는 방법
	* 일단 만든다. 
		* 언어 공부를 한 후 프로젝트 바로 시작 
		* 지식의 순서가 없으니 지식을 정리하는 것도 중요함 
	* 외주를 따온다? 
		* 난 게으름 
		* 일을 먼저 따오고 무조건 책임을 져야되니까 공부하게됨 
		* 위험부담이 커서 추천하지않음 
	* 구글 때리기 
		* 실제로 돌아가는 코드 먼저 봄 
		* 실제 돌아가는 코드를 이해하고 파악하는게 중요함 
		* 오픈소스를 쓸때 내부적으로 어떻게 돌아가는지 공부하는게 중요함 
		* 커뮤니티 스터디 많이 나가기 
			* 피해야되는점 
				* 술마시면 안됨 
			* 추천하는점 
				* iOS 개발을 한다고 해서 그 스터디만 찾아다닐 필요없음 
				* 함수형 프로그래밍 스터디 도움 됬음 
	* 책으로 공부 
		* 책에서 많은 것을 볼 수있음 
		* 튜토리얼을 순서대로 볼 수있음 
		* 출판사에서 모집하는 리뷰어에 많이 지원함 
		* 원서 읽는거 중요 
		* 책을 읽고 괜찮아서 출판사에 문의 
		* 번역해봄 
		* 내가 보는 책이 한국어로 나오면 좋겠다 라는 심정으로 번역을 해봄 
		* 블로그같은 글을 내가 번역해보기 
	
	* 문서로 공부 
		* 애초에 문서로 공부로 할 수밖에 없었다.
		* 처음에 애플문서 찾기 힘듬
		

* 가장 좋은방법 
	* 공부한것을 풀어보기 
		* 블로그 
		* 강연 
		* 설명 


* 질문 
	* 대안 개발 환경의 미래 
		* 플로터 , 리엑트 네이티브 
			* 답은 아니다 
			

	* iOS개발자의 미래 
		* 공부를 하는 방법을 공부하기 
		* 커리어를 iOS 로 시작하는 것은 긍정적 
		* 데스크탑개발까지 넘어갈 수있음 
		* iOS 개발자를 뽑기가 쉽지 않음 
			* 경험이 없음 
		* 개발자가 되면 특정 플랫폼에 묶이지 말고 개발자의 전문성에 집중하는게 중요


		
